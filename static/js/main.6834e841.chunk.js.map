{"version":3,"sources":["components/Board.js","App.js","index.js"],"names":["Board","props","cells","i","push","className","onClick","cellClick","App","useState","isXTurn","setIsXTurn","xScore","setXScore","oScore","setOScore","xWinScore","setXWinScore","oWinScore","setOWinScore","winCombinations","allCells","document","querySelectorAll","winActions","checkWinner","map","cell","classList","add","querySelector","winCombinationArr","currentPlayerScore","winCombo","length","checkCombination","oneWinCombo","scoreArr","count","includes","markBoard","e","target","axis","circle","keepScore","resetGame","remove","childNodes","forEach","child","id","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6834e841.chunk.js","sourcesContent":["\n\nfunction Board(props) {\n\n\t//cells arr populated with numbered items 1 to 9 (board cells)\n\t//return board div with 9 cell div, each with cross and circle div elements inside (these are for css)\n\tlet cells = [];\n\tfor (var i = 1; i <= 9; i++) {\n\t\t\n\t\t\tcells.push(\n\t\t\t\t<div className={`cell no${i}`} key={i} onClick={props.cellClick}>\n\t\t        \t<div className=\"mark cross axis1\"/>\n\t\t        \t<div className=\"mark cross axis2\"/>\n\t\t        \t<div className=\"mark circle outer\"/>\n\t\t        \t<div className=\"mark circle inner\"/>\n      \t\t\t</div>\n      \t\t);\n\t\t};\n\n\treturn(\n\t\t<div className=\"board\">\n\t\t\t{cells}\n\t\t</div>\n\t\t);\n};\n\nexport default Board;\n","\nimport React, {useState}  from 'react';\nimport './App.css';\nimport Board from './components/Board.js';\n\n\nfunction App() {\n\n  const [isXTurn, setIsXTurn] = useState(true);\n  const [xScore, setXScore] = useState([]); //cells marked with X\n  const [oScore, setOScore] = useState([]); //cells marked with O\n  const [xWinScore, setXWinScore] = useState(0);  //score of games\n  const [oWinScore, setOWinScore] = useState(0);\n\n  \n\n  const winCombinations = [\n    [\"no1\", \"no2\", \"no3\"],\n    [\"no4\", \"no5\", \"no6\"],\n    [\"no7\", \"no8\", \"no9\"],\n    [\"no1\", \"no4\", \"no7\"],\n    [\"no2\", \"no5\", \"no8\"],\n    [\"no3\", \"no6\", \"no9\"],\n    [\"no1\", \"no5\", \"no9\"],\n    [\"no3\", \"no5\", \"no7\"],\n  ];\n\n  let allCells = [...document.querySelectorAll('.cell')];\n  \n\n  const cellClick = (e) => {\n    markBoard(e)\n    keepScore(e)\n    winActions();\n  };\n\n  //checks if there is a winner, if true, then: all cells inactive, winner class\n  //added to winning combo cells (for animation)\n  //update win score\n  const winActions = () => {\n\n    if (checkWinner(winCombinations, xScore)) {\n        allCells.map(cell => cell.classList.add('inactive'));\n        checkWinner(winCombinations, xScore)\n              .map(cell =>{\n                document.querySelector(`.${cell}`).classList.add('winner')\n              })\n        setXWinScore(xWinScore+1)\n      }else if (checkWinner(winCombinations, oScore)) {\n        allCells.map(cell => cell.classList.add('inactive'));\n        checkWinner(winCombinations, oScore)\n              .map(cell =>{\n                document.querySelector(`.${cell}`).classList.add('winner')\n              })\n        setOWinScore(oWinScore+1)\n      };\n\n  };\n\n\n  //loop through all winning combos and compare against player score \n  //return winning combo or undefined\n  const checkWinner = (winCombinationArr, currentPlayerScore) =>{\n\n    let winCombo;\n\n    for(var i = 0; i < winCombinationArr.length; i++){\n      if(checkCombination(winCombinationArr[i], currentPlayerScore) === 3){\n        winCombo = winCombinationArr[i]\n      }\n      }\n    return winCombo\n    };\n\n    //helper func, compares one winning combo to player score, counts matches\n    //3 matches is a win\n    function checkCombination(oneWinCombo, scoreArr){\n      let count = 0;\n      for (var i = 0; i < oneWinCombo.length; i++){\n        if (scoreArr.includes(oneWinCombo[i])) {\n          count += 1;\n        } \n      }\n      return count;\n    };\n\n  // if xturn make x visible by adding class visible to .cross class elements\n  //otherwise make circle visible\n  //querySelectorAll return nodelist, ... spread operator to \n  //create an array out of the nodelist\n  //finally disable clicking on target cell \n  const markBoard = (e) => {\n    if (isXTurn) {\n      [...e.target.querySelectorAll('.cross')]\n          .map(axis =>{\n            axis.classList.add('visible')\n          });\n      setIsXTurn(false)\n    }else{\n      [...e.target.querySelectorAll('.circle')]\n          .map(circle =>{\n            circle.classList.add('visible')\n          });\n      setIsXTurn(true)\n    }\n    e.target.classList.add('inactive')\n  }\n\n  //push the cell className to score state arr\n  const keepScore = (e) => {\n    isXTurn ? xScore.push(e.target.classList[1]) : oScore.push(e.target.classList[1])\n  };\n\n\n  //remove inactive class from all cells\n  //remove \"visble and \"winner\" from all child elements of cells\n  //clear scores for both players\n  const resetGame = () => {\n    allCells.map(cell => {\n      cell.classList.remove(\"inactive\", \"winner\");\n      [...cell.childNodes].forEach(child => child.classList.remove(\"visible\"));\n    })\n    setOScore([]);\n    setXScore([]);\n    setIsXTurn(true);\n  };\n\n  const resetWinScore = () => {\n    setXWinScore(0);\n    setOWinScore(0);\n    resetGame();\n  }\n\n\nreturn(\n    <div className=\"wrapper\">\n     <Board cellClick={cellClick}/>\n     <div className=\"display\">\n      <div id=\"xScoreDisplay\" className=\"score\"><span>X</span><span>:</span><span>{xWinScore}</span></div>\n      <div id=\"oScoreDisplay\" className=\"score\"><span>O</span><span>:</span><span>{oWinScore}</span></div>\n      <button className=\"resetGameButton\" onClick={resetGame} >NEW GAME</button><br/>\n      <button className=\"resetScoreButton\" onClick={resetWinScore} >CLEAR SCORE</button>\n    </div>\n    </div>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}